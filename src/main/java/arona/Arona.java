package arona;

import arona.commands.DeadlineCommand;
import arona.commands.DeleteCommand;
import arona.commands.EventCommand;
import arona.commands.FindCommand;
import arona.commands.ListCommand;
import arona.commands.MarkCommand;
import arona.commands.ToDoCommand;
import arona.commands.UnMarkCommand;
import arona.parser.Parser;
import arona.storage.Storage;
import arona.task.TaskList;
import arona.ui.Ui;

/**
 * Arona is a simple command-line task management application that allows users to manage their tasks.
 * Users can add tasks, mark tasks as done, delete tasks, and list all tasks.
 */
public class Arona {

    private Storage storage;
    private TaskList tasks;
    private Ui ui;

    /**
     * Initializes a new instance of the Arona application with the specified file path for data storage.
     *
     * @param filePath The file path where task data is stored.
     */
    public Arona(String filePath) {
        ui = new Ui();
        storage = new Storage(filePath);
        tasks = new TaskList(storage);
    }

    /**
     * Generates a response to user input.
     *
     * @param input The user's input.
     * @return The response generated by Arona.
     */
    public String getResponse(String input) {

        String[] inputTokens = Parser.parseUserInput(input);
        String command = Parser.getCommand(inputTokens);

        try {
            switch (command) {
            case "list":
                ListCommand listCommand = new ListCommand(tasks, ui);
                return listCommand.execute();
            case "unmark":
                UnMarkCommand unmarkCommand =
                        new UnMarkCommand(tasks, ui, storage, Parser.getTaskIndex(inputTokens));
                return unmarkCommand.execute();
            case "mark":
                MarkCommand markCommand =
                        new MarkCommand(tasks, ui, storage, Parser.getTaskIndex(inputTokens));
                return markCommand.execute();
            case "todo":
                ToDoCommand toDoCommand =
                        new ToDoCommand(tasks, ui, storage, Parser.getToDoDescription(inputTokens));
                return toDoCommand.execute();
            case "deadline":
                DeadlineCommand deadlineCommand =
                        new DeadlineCommand(tasks, ui, storage, Parser.getDeadlineDescription(inputTokens));
                return deadlineCommand.execute();
            case "event":
                EventCommand eventCommand =
                        new EventCommand(tasks, ui, storage, Parser.getEventDescription(inputTokens));
                return eventCommand.execute();
            case "delete":
                DeleteCommand deleteCommand =
                        new DeleteCommand(tasks, ui, storage, Parser.getTaskIndex(inputTokens));
                return deleteCommand.execute();
            case "find":
                FindCommand findCommand = new FindCommand(tasks, ui, Parser.getKeyWord(inputTokens));
                return findCommand.execute();
            default:
                return ui.showInvalidArgumentMessage();
            }
        } catch (Exception e) {
            return ui.showErrorMessage(e);
        }
    }
}

